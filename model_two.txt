model two


Hyperparams:
{
    "batch_size": 64,
    "beta_entropy": 0.01,
    "discount_factor": 0.995,
    "e_greedy_value": 0.05,
    "epsilon_steps": 10000,
    "exploration_type": "categorical",
    "loss_type": "huber",
    "lr": 0.0002,
    "num_episodes_between_training": 10,
    "num_epochs": 10,
    "stack_size": 1,
    "term_cond_avg_score": 350.0,
    "term_cond_max_episodes": 1000,
    "sac_alpha": 0.2
  }
  
  
Action Space:
{
    "action_space": [
  { "steering_angle": -45, "speed": 1.00},
  { "steering_angle": -30, "speed": 1.50},
  { "steering_angle": -10, "speed": 1.50},
  { "steering_angle": 0,   "speed": 2.5},
  { "steering_angle": 0,   "speed": 1.50},
  { "steering_angle": 10,  "speed": 1.5},
  { "steering_angle": 30,  "speed": 1.5},
  { "steering_angle": 45,  "speed": 1.0}],
    "sensor": ["FRONT_FACING_CAMERA"],
    "neural_network": "DEEP_CONVOLUTIONAL_NETWORK_SHALLOW",
    "training_algorithm": "clipped_ppo", 
    "action_space_type": "discrete",
    "version": "4"
}







Reward Function
def reward_function(params):
    
    import math
    
    reward = 1e-3
        
    rabbit = [0,0]
    pointing = [0,0]
    
    # Read input variables
    waypoints = params['waypoints']
    closest_waypoints = params['closest_waypoints']
    heading = params['heading']
    x=params['x']
    y=params['y']
    # Reward when yaw (car_orientation) is pointed to the next waypoint IN FRONT.
    
    # Find nearest waypoint coordinates
    rabbit = waypoints[closest_waypoints[1]]
    
    radius = math.hypot(x - rabbit[0], y - rabbit[1])
    
    pointing[0] = x + (radius * math.cos(heading))
    pointing[1] = y + (radius * math.sin(heading))
    
    vector_delta = math.hypot(pointing[0] - rabbit[0], pointing[1] - rabbit[1])
    
    # Max distance for pointing away will be the radius * 2
    # Min distance means we are pointing directly at the next waypoint
    # We can setup a reward that is a ratio to this max.
        
    if vector_delta == 0:
        reward += 1
    else:
        reward += ( 1 - ( vector_delta / (radius * 2)))

    return reward
